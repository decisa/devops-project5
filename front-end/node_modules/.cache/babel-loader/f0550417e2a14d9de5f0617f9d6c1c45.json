{"ast":null,"code":"var _jsxFileName = \"/Users/decisa/Documents/Nanodegree/Project5/todo-app/front-end/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport './Components/FontAwesomeIcons'; // import Flag from './Components/Flag/Flag';\n\nimport ToDoItem from './Components/ToDoItem/ToDoItem';\nimport AddTask from './Components/AddTask/AddTask';\nimport ToolBar from './Components/ToolBar/ToolBar'; // import DB from './server/db';\n\nconst todoApiEndpoint = \"http://localhost:3000/api/todo\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      settings: {\n        visibility: true,\n        showTime: true\n      },\n      todoList: [// {\n        //   order: 0,\n        //   id: 1598148045822,\n        //   timeCreated: 1598148045822,\n        //   timeCompleted: null,\n        //   completed: false,\n        //   description: \"Create React todo App\"\n        // },\n        // {\n        //   order: 1,\n        //   id: 1598148380431,\n        //   timeCreated: 1598148380431,\n        //   timeCompleted: 1598155919779,\n        //   completed: true,\n        //   description: \"Upload to github\"\n        // },\n        // {\n        //   order: 2,\n        //   id: 1598148499197,\n        //   timeCreated: 1598148499197,\n        //   timeCompleted: null,\n        //   completed: false,\n        //   description: \"Deploy the App to AWS\"\n        // },\n        // {\n        //   order: 3,\n        //   id: 1598238567108,\n        //   timeCreated: 1598238567108,\n        //   timeCompleted: 1598328365994,\n        //   completed: true,\n        //   description: \"Add focus on task edit \"\n        // },\n        // {\n        //   order: 4,\n        //   id: 1598328418994,\n        //   timeCreated: 1598328418994,\n        //   timeCompleted: null,\n        //   completed: false,\n        //   description: \"Make data persistent by adding MySQL database\"\n        // },\n        // {\n        //   order: 5,\n        //   id: 1598328506876,\n        //   timeCreated: 1598328506876,\n        //   timeCompleted: null,\n        //   completed: false,\n        //   description: \"Add Express.js backend routing\"\n        // }\n      ],\n      deleteHistory: []\n    };\n\n    this.fetchTodos = async () => {\n      let allTodos = await fetch(todoApiEndpoint + '/all').then(res => res.json()); // console.log(\"result:\", allTodos.length);\n\n      this.setState({\n        todoList: allTodos\n      });\n    };\n\n    this.toggleComplete = async id => {\n      let index = this.state.todoList.findIndex(task => task.id === id);\n      let {\n        completed\n      } = this.state.todoList[index];\n      const response = await fetch(todoApiEndpoint + '/update', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          completed: !completed\n        })\n      });\n\n      if (response.status === 200) {\n        this.fetchTodos();\n      }\n    };\n\n    this.toggleVisibilitySetting = () => {\n      this.setState({\n        settings: { ...this.state.settings,\n          visibility: !this.state.settings.visibility\n        }\n      });\n    };\n\n    this.toggleTimeSetting = () => {\n      this.setState({\n        settings: { ...this.state.settings,\n          showTime: !this.state.settings.showTime\n        }\n      });\n    };\n\n    this.addTask = async description => {\n      const sort_order = this.state.todoList.length;\n      const response = await fetch(todoApiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description,\n          sort_order\n        })\n      });\n\n      if (response.status === 200) {\n        this.fetchTodos();\n      }\n    };\n\n    this.deleteTask = async id => {\n      const response = await fetch(todoApiEndpoint, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id\n        })\n      });\n\n      if (response.status === 200) {\n        let index = this.state.todoList.findIndex(task => task.id === id);\n        this.setState({\n          deleteHistory: this.state.deleteHistory.concat({ ...this.state.todoList[index]\n          })\n        });\n        this.fetchTodos();\n      }\n    };\n\n    this.updateTask = async (id, description) => {\n      const response = await fetch(todoApiEndpoint + '/update', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          description\n        })\n      });\n      console.log(response);\n\n      if (response.status === 200) {\n        this.fetchTodos();\n      }\n    };\n\n    this.undoDelete = async () => {\n      if (!this.state.deleteHistory.length) {\n        return;\n      }\n\n      const newDeleteHistory = [...this.state.deleteHistory];\n      const item = newDeleteHistory.pop();\n      const response = await fetch(todoApiEndpoint + '/restore', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n\n      if (response.status === 200) {\n        console.log('successfully restored item:', item);\n        this.setState({\n          deleteHistory: newDeleteHistory\n        });\n        this.fetchTodos();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTodos();\n  }\n\n  render() {\n    const visibility = this.state.settings.visibility;\n    const tasks = this.state.todoList.filter(task => visibility || !task.completed).sort((a, b) => a.order - b.order).map((task, i) => /*#__PURE__*/React.createElement(ToDoItem, {\n      task: task,\n      settings: this.state.settings,\n      toggleComplete: this.toggleComplete.bind(this, task.id),\n      key: task.id,\n      number: i,\n      deleteTask: this.deleteTask.bind(this, task.id),\n      updateTask: this.updateTask.bind(this, task.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, \"Udacity DevOps Project #5\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, \"by Art Telesh\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ToolBar, {\n      settings: this.state.settings,\n      toggleVisibility: this.toggleVisibilitySetting,\n      toggleTime: this.toggleTimeSetting,\n      deleteHistory: this.state.deleteHistory,\n      undoDelete: this.undoDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }), tasks, /*#__PURE__*/React.createElement(AddTask, {\n      addTask: this.addTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/decisa/Documents/Nanodegree/Project5/todo-app/front-end/src/App.js"],"names":["React","Component","ToDoItem","AddTask","ToolBar","todoApiEndpoint","App","state","settings","visibility","showTime","todoList","deleteHistory","fetchTodos","allTodos","fetch","then","res","json","setState","toggleComplete","id","index","findIndex","task","completed","response","method","headers","body","JSON","stringify","status","toggleVisibilitySetting","toggleTimeSetting","addTask","description","sort_order","length","deleteTask","concat","updateTask","console","log","undoDelete","newDeleteHistory","item","pop","componentDidMount","render","tasks","filter","sort","a","b","order","map","i","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './Components/FontAwesomeIcons';\n// import Flag from './Components/Flag/Flag';\nimport ToDoItem from './Components/ToDoItem/ToDoItem';\nimport AddTask from './Components/AddTask/AddTask';\nimport ToolBar from './Components/ToolBar/ToolBar';\n// import DB from './server/db';\n\nconst todoApiEndpoint = \"http://localhost:3000/api/todo\"\n\nclass App extends Component {\n  state = {\n    settings: {\n      visibility: true,\n      showTime: true\n    },\n    todoList: [\n      // {\n      //   order: 0,\n      //   id: 1598148045822,\n      //   timeCreated: 1598148045822,\n      //   timeCompleted: null,\n      //   completed: false,\n      //   description: \"Create React todo App\"\n      // },\n      // {\n      //   order: 1,\n      //   id: 1598148380431,\n      //   timeCreated: 1598148380431,\n      //   timeCompleted: 1598155919779,\n      //   completed: true,\n      //   description: \"Upload to github\"\n      // },\n      // {\n      //   order: 2,\n      //   id: 1598148499197,\n      //   timeCreated: 1598148499197,\n      //   timeCompleted: null,\n      //   completed: false,\n      //   description: \"Deploy the App to AWS\"\n      // },\n      // {\n      //   order: 3,\n      //   id: 1598238567108,\n      //   timeCreated: 1598238567108,\n      //   timeCompleted: 1598328365994,\n      //   completed: true,\n      //   description: \"Add focus on task edit \"\n      // },\n      // {\n      //   order: 4,\n      //   id: 1598328418994,\n      //   timeCreated: 1598328418994,\n      //   timeCompleted: null,\n      //   completed: false,\n      //   description: \"Make data persistent by adding MySQL database\"\n      // },\n      // {\n      //   order: 5,\n      //   id: 1598328506876,\n      //   timeCreated: 1598328506876,\n      //   timeCompleted: null,\n      //   completed: false,\n      //   description: \"Add Express.js backend routing\"\n      // }\n    ],\n    deleteHistory: []\n  };\n  componentDidMount() {\n    this.fetchTodos();\n  }\n\n  fetchTodos = async () => {\n    let allTodos =  await fetch(todoApiEndpoint + '/all')\n      .then(res => res.json());\n    // console.log(\"result:\", allTodos.length);\n    this.setState({\n      todoList: allTodos\n    });\n     \n  }\n\n  toggleComplete = async (id) => {\n    let index = this.state.todoList.findIndex(task => task.id === id);\n    let { completed } = this.state.todoList[index];\n\n    const response = await fetch(todoApiEndpoint + '/update', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        completed: !completed\n      })\n    });\n\n    if (response.status === 200) {\n      this.fetchTodos();\n    }    \n  }\n\n  toggleVisibilitySetting = () => {\n    this.setState({\n      settings: {\n        ...this.state.settings,\n        visibility: ! this.state.settings.visibility\n      }\n    });\n  }\n\n  toggleTimeSetting = () => {\n    this.setState({\n      settings: {\n        ...this.state.settings,\n        showTime: ! this.state.settings.showTime\n      }\n    });\n  }\n\n  addTask = async (description) => {\n    const sort_order = this.state.todoList.length;\n    const response = await fetch(todoApiEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        description,\n        sort_order\n      })\n    });\n    if (response.status === 200) {\n      this.fetchTodos();\n    } \n  \n  } \n\n  deleteTask = async (id) => {\n    const response = await fetch(todoApiEndpoint, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    });\n    if (response.status === 200) {\n      let index = this.state.todoList.findIndex(task => task.id === id);\n      this.setState({\n        deleteHistory: this.state.deleteHistory.concat({...this.state.todoList[index]})\n      });\n      this.fetchTodos();\n    }    \n  }\n\n  updateTask = async (id, description) => {\n    const response = await fetch(todoApiEndpoint + '/update', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        description\n      })\n    });\n\n    console.log(response);\n    if (response.status === 200) {\n      this.fetchTodos();\n    }    \n  \n  }\n\n  undoDelete = async () => {\n    if (!this.state.deleteHistory.length) {\n      return;\n    }\n    const newDeleteHistory = [...this.state.deleteHistory];\n    const item = newDeleteHistory.pop();\n\n    const response = await fetch(todoApiEndpoint + '/restore', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    });\n\n    if (response.status === 200) {\n      console.log('successfully restored item:', item);\n      this.setState({\n        deleteHistory: newDeleteHistory\n      });\n      this.fetchTodos();\n    }\n  }\n\n  render() { \n    const visibility = this.state.settings.visibility;\n    const tasks = this.state.todoList\n      .filter(task => visibility || !task.completed)\n      .sort((a, b) => a.order - b.order)\n      .map((task, i) => \n        <ToDoItem \n          task={task} \n          settings={this.state.settings}\n          toggleComplete={this.toggleComplete.bind(this, task.id)} \n          key={task.id}\n          number={i}\n          deleteTask={this.deleteTask.bind(this, task.id)}\n          updateTask={this.updateTask.bind(this, task.id)}\n          />\n      );\n\n    return(\n      <div className=\"App\">\n        <h1 className=\"text-center\">Udacity DevOps Project #5</h1>\n        <p className=\"text-center\">by Art Telesh</p>\n\n        <div className=\"container\">\n          <ToolBar \n            settings={this.state.settings} \n            toggleVisibility={this.toggleVisibilitySetting} \n            toggleTime={this.toggleTimeSetting}\n            deleteHistory={this.state.deleteHistory}\n            undoDelete={this.undoDelete} />\n          { tasks }\n          <AddTask addTask={this.addTask}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}