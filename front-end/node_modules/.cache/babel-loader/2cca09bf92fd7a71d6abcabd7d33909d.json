{"ast":null,"code":"var _jsxFileName = \"/Users/decisa/Documents/Nanodegree/Project5/todo-app/front-end/src/Components/ToDoItem/ToDoItem.js\";\nimport React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport './ToDoItem.css';\n\nconst ToDoItem = props => {\n  let {\n    date_added,\n    date_completed,\n    completed,\n    description,\n    id\n  } = props.task;\n  let {\n    showTime\n  } = props.settings; // adding state to control edit functionality\n\n  const [editModeState, setEditModeState] = useState({\n    editMode: false,\n    value: description\n  }); // set focus to input if input updated:\n\n  useEffect(() => {\n    if (editModeState.editMode) {\n      document.getElementById(`edit-${id}`).focus(); // console.log('focused');\n    }\n  });\n\n  const changeHandler = e => {\n    setEditModeState({ ...editModeState,\n      value: e.target.value\n    }); // console.log(e.target.value);\n  };\n\n  const toggleEditMode = () => {\n    setEditModeState({ ...editModeState,\n      editMode: !editModeState.editMode\n    });\n  };\n\n  const updateTaskHandler = () => {\n    toggleEditMode();\n    if (description !== editModeState.value) props.updateTask(editModeState.value);\n  };\n\n  const shortcutsHandler = e => {\n    switch (e.keyCode) {\n      case 13:\n        // Enter\n        // console.log(e.target.value)\n        updateTaskHandler();\n        break;\n\n      case 27:\n        // ESC\n        toggleEditMode();\n        break;\n\n      default:\n    } // console.log(`key: ${e.key}, keyCode: ${e.keyCode}`);\n\n  }; // ************** COMPONENT LAYOUT HELPERS **************\n  // \"DD MMM'YY, LT\"\n  // \"YYYY-MM-DD hh:mm:ss\"\n\n\n  const timeInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-6 todoitem-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"date added:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 67\n    }\n  }, moment(date_added, \"YYYY-MM-DD HH:mm:ss Z\").format(\"YYYY-MM-DD hh:mm:ssa\"))), date_completed ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-6 todoitem-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 32\n    }\n  }, \"date completed:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 84\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 90\n    }\n  }, moment(date_completed, \"YYYY-MM-DD HH:mm:ss Z\").format(\"YYYY-MM-DD hh:mm:ssa\"))) : null);\n  const displayDescription = /*#__PURE__*/React.createElement(\"span\", {\n    className: \"col-12 todoitem-desc\" + (completed ? \" todoitem-completed\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }, props.number + 1, \". \", description);\n  const editDescription = /*#__PURE__*/React.createElement(\"input\", {\n    id: `edit-${id}`,\n    className: \"w-100 pl-3\",\n    type: \"text\",\n    placeholder: \"describe your task\",\n    onKeyDown: shortcutsHandler,\n    value: editModeState.value,\n    onChange: changeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  });\n  const editButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"check\",\n    className: \"icon icon-green\",\n    onClick: updateTaskHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"ban\",\n    className: \"icon icon-red\",\n    onClick: toggleEditMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }));\n  const displayButtons = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"pencil-alt\",\n    className: \"icon icon-grey\",\n    onClick: toggleEditMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"times\",\n    className: \"icon icon-red\",\n    onClick: props.deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n  const checkBoxChecked = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: [\"fas\", \"check\"],\n    className: \"icon-sm icon-grey\",\n    onClick: props.toggleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 30\n    }\n  });\n  const checkBoxNotChecked = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"icon-sm icon-grey\",\n    onClick: props.toggleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 33\n    }\n  }, \"\\xA0\");\n  const editIcon = /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"pencil-alt\",\n    className: \"icon-sm icon-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }); // ************** RENDER COMPONENT **************\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row todoitem border border-secondary my-1 py-2 rounded align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-1 todoitem-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, editModeState.editMode ? editIcon : completed ? checkBoxChecked : checkBoxNotChecked), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col row no-gutters todoitem-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, editModeState.editMode ? editDescription : displayDescription, showTime ? timeInfo : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4 col-2-md row no-gutters align-self-center justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, editModeState.editMode ? editButtons : displayButtons));\n};\n\nexport default ToDoItem;","map":{"version":3,"sources":["/Users/decisa/Documents/Nanodegree/Project5/todo-app/front-end/src/Components/ToDoItem/ToDoItem.js"],"names":["React","useState","useEffect","FontAwesomeIcon","moment","ToDoItem","props","date_added","date_completed","completed","description","id","task","showTime","settings","editModeState","setEditModeState","editMode","value","document","getElementById","focus","changeHandler","e","target","toggleEditMode","updateTaskHandler","updateTask","shortcutsHandler","keyCode","timeInfo","format","displayDescription","number","editDescription","editButtons","displayButtons","deleteTask","checkBoxChecked","toggleComplete","checkBoxNotChecked","editIcon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from  'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport './ToDoItem.css'\n\n\nconst ToDoItem = (props) => {\n\n    let { date_added, date_completed, completed, description, id } = props.task;\n    let { showTime } = props.settings;\n\n    // adding state to control edit functionality\n    const [editModeState, setEditModeState] = useState({\n        editMode: false,\n        value: description\n    })\n\n    // set focus to input if input updated:\n    useEffect(() => {\n        if (editModeState.editMode) {\n            document.getElementById(`edit-${id}`).focus();\n            // console.log('focused');\n        }\n    });\n\n    \n\n    const changeHandler = (e) => {\n        setEditModeState({\n            ...editModeState,\n            value: e.target.value\n        })\n        // console.log(e.target.value);\n    }\n\n    const toggleEditMode = () => {\n        setEditModeState({\n            ...editModeState,\n            editMode: !editModeState.editMode\n        })\n    }\n\n    const updateTaskHandler = () => {\n        toggleEditMode();\n\n        if (description !== editModeState.value)\n            props.updateTask(editModeState.value);\n    }\n\n    const shortcutsHandler = (e) => {\n        switch(e.keyCode) {\n            case 13: // Enter\n                // console.log(e.target.value)\n                updateTaskHandler();\n                break;\n            case 27: // ESC\n                toggleEditMode();\n                break;\n            default:\n        }\n        // console.log(`key: ${e.key}, keyCode: ${e.keyCode}`);\n    }\n\n\n    // ************** COMPONENT LAYOUT HELPERS **************\n    // \"DD MMM'YY, LT\"\n    // \"YYYY-MM-DD hh:mm:ss\"\n    const timeInfo = (\n        <>\n            <div className=\"col-6 todoitem-date\">date added:<br /><span>{moment(date_added, \"YYYY-MM-DD HH:mm:ss Z\").format(\"YYYY-MM-DD hh:mm:ssa\")}</span></div>\n            { date_completed ? <div className=\"col-6 todoitem-date\">date completed:<br /><span>{moment(date_completed, \"YYYY-MM-DD HH:mm:ss Z\").format(\"YYYY-MM-DD hh:mm:ssa\")}</span></div> : null }\n        </>);\n\n    const displayDescription = (<span className={\"col-12 todoitem-desc\" + (completed ? \" todoitem-completed\": \"\")}>{props.number + 1}. {description}</span>);\n    const editDescription = (\n        <input\n            id={`edit-${id}`} \n            className=\"w-100 pl-3\"\n            type=\"text\" \n            placeholder=\"describe your task\"\n            onKeyDown={ shortcutsHandler }\n            value={ editModeState.value }\n            onChange={ changeHandler }\n        />);\n\n    const editButtons = (\n        <>\n            <FontAwesomeIcon\n                icon=\"check\"\n                className=\"icon icon-green\"\n                onClick={updateTaskHandler}/>\n            <FontAwesomeIcon \n                icon=\"ban\"\n                className=\"icon icon-red\"\n                onClick={ toggleEditMode }/>\n        </>);\n\n    const displayButtons = (\n        <>\n            <FontAwesomeIcon\n                icon=\"pencil-alt\"\n                className=\"icon icon-grey\"\n                onClick={ toggleEditMode }/>\n            <FontAwesomeIcon \n                icon=\"times\"\n                className=\"icon icon-red\"\n                onClick={ props.deleteTask }/>\n        </>);\n\n    const checkBoxChecked = (<FontAwesomeIcon icon={[\"fas\", \"check\"]} className=\"icon-sm icon-grey\" onClick={props.toggleComplete}/>);\n    const checkBoxNotChecked = (<div className=\"icon-sm icon-grey\" onClick={props.toggleComplete} >&nbsp;</div>)\n    const editIcon = (\n        <FontAwesomeIcon\n            icon=\"pencil-alt\"\n            className=\"icon-sm icon-green\"\n        />);\n\n    // ************** RENDER COMPONENT **************\n\n    return (\n        <div className=\"row todoitem border border-secondary my-1 py-2 rounded align-items-center\">\n            <div className=\"col-1 todoitem-controls\" >\n                { editModeState.editMode ? editIcon : (completed ? checkBoxChecked : checkBoxNotChecked) }\n            </div>\n            <div className=\"col row no-gutters todoitem-info\">                \n                { editModeState.editMode ? editDescription : displayDescription}                  \n                { showTime ? timeInfo : null}\n            </div>\n            <div className=\"col-4 col-2-md row no-gutters align-self-center justify-content-end\">\n                { editModeState.editMode ? editButtons : displayButtons }          \n            </div>\n        </div>\n    );\n}\n\nexport default ToDoItem;"]},"metadata":{},"sourceType":"module"}